#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int INF = 1000000000;
int d[410][410];
void floydWarshall(int v);

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);

	int v, e;
	cin >> v >> e;
	
	// d배열을 초기화
	for (int i = 1; i <= v; i++) {
		for (int j = 1; j <= v; j++) {
			d[i][j] = INF;
		}
	}

	int a, b, c;
	for (int i = 0; i < e; i++) {
		cin >> a >> b >> c;
		if (c < d[a][b]) {
			d[a][b] = c;
		}
	}

	floydWarshall(v);
	return 0;
}

void floydWarshall(int v) {
	for (int k = 1; k <= v; k++) {
		for (int i = 1; i <= v; i++) {
			for (int j = 1; j <= v; j++) {
				if (d[i][k] + d[k][j] < d[i][j]) {
					d[i][j] = d[i][k] + d[k][j];
				}
			}
		}
	}
	vector<int> temp;
	for (int i = 1; i <= v; i++) {
		temp.push_back(d[i][i]);
	}
	if (*min_element(temp.begin(), temp.end()) == INF) {
		cout << "-1\n";
	}
	else {
		cout << *min_element(temp.begin(), temp.end()) << "\n";
	}

}