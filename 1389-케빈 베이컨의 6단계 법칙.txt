#include<iostream>
#include<queue>
using namespace std;

int INF = 1000000000;
int game[110][110];
void floydWarshall(int n);

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);

	int n, m;
	cin >> n >> m;

	// 먼저 결과 그래프의 모든 값을 INF로 초기화시킴
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			game[i][j] = INF;
		}
	}

	// 친구 관계를 입력 받아 결과 그래프를 초기화 시킴
	int friend1, friend2;
	for (int i = 0; i < m; i++) {
		cin >> friend1 >> friend2;
		game[friend1][friend2] = 1;
		game[friend2][friend1] = 1;
	}

	// 플로이드 와샬 알고리즘을 수행
	floydWarshall(n);
	return 0;
}

void floydWarshall(int n) {
	priority_queue<pair<int, int> > score;

	for (int k = 1; k <= n; k++) {
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (game[i][k] + game[k][j] < game[i][j]) {
					game[i][j] = game[i][k] + game[k][j];
				}
			}
		}
	}
	// 케빈 베이컨의 수를 구함
	// priority_queue는 큰것이 top으로 오도록 정렬하기 때문에 <-케빈 베이컨 수, -사람 번호>순으로 큐에 push한다.
	// 케빈 베이컨 수가 같으면 번호가 작은 사람이 앞으로 와야하기 때문에 사람 번호 또한 음수화하여 저장
	for (int i = 1; i <= n; i++) {
		int sum = 0;
		for (int j = 1; j <= n; j++) {
			sum += game[i][j];
		}
		score.push(make_pair(-sum, -i));
	}
	cout << -score.top().second << "\n";
}